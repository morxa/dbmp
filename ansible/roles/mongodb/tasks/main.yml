- name: install mongodb
  dnf: name=mongodb state=latest
  notify: restart mongodb
- name: add temporal mongodb config to add users
  template:
    src: etc-mongod.conf.temp.j2
    dest: /etc/mongod.conf
  notify: restart mongodb
- name: create directory used for mongodb certificates
  file:
    path: /etc/mongodb/ssl
    state: directory
- name: copy CA certificate
  copy:
    src: certs/ca.crt
    dest: /etc/mongodb/ssl/ca.pem
  notify: restart mongodb
- name: copy mongodb server certificate
  copy:
    src: certs/{{ ansible_hostname }}-mongodb-server.pem
    dest: /etc/mongodb/ssl/server.pem
    owner: root
    group: mongodb
    mode: u=rw,g=r,o=
  notify: restart mongodb
- name: install python2-firewall
  dnf: name=python2-firewall state=latest
- name: open mongodb port
  firewalld:
    port: 27017/tcp
    permanent: true
    state: enabled
    immediate: yes
- name: enable mongodb
  service:
    name: mongod
    enabled: yes
  notify: restart mongodb
- name: flush handlers
  meta: flush_handlers
- include_vars: mongo_users.yml
- name: remove all mongo users
  command: "mongo --eval \"db.runCommand({ dropAllUsersFromDatabase: 1 })\" admin"
  when: remove_all_mongo_users|default(false)
- name: check which users exist
  command: "mongo --eval \"db.system.users.find({ user: '{{ item.user }}' }).count()\" admin"
  register: mongo_user_query
  changed_when: False
  with_items: "{{ mongo_users }}"
- name: gather existing users
  set_fact:
    existing_mongo_users: "{{ existing_mongo_users|default([]) + [ item.item.user ] }}"
  when: item.stdout_lines[-1] == "1"
  with_items: "{{ mongo_user_query.results }}"
- debug: var=existing_mongo_users
- name: add database users
  command: >
    mongo --eval
    "db.createUser({ user: '{{ item.user }}',
                    pwd: '{{ item.pwd }}',
                    roles: {{ item.roles }} })" admin
  when: item.user not in existing_mongo_users|default([])
  with_items: "{{ mongo_users }}"
- name: update existing database users
  command: >
    mongo --eval
    "db.updateUser('{{ item.user }}',
                    { pwd: '{{ item.pwd }}',
                      roles: {{ item.roles }}
                    })" admin
  when: item.user in existing_mongo_users|default([])
  with_items: "{{ mongo_users }}"
- name: add mongodb config
  template:
    src: etc-mongod.conf.j2
    dest: /etc/mongod.conf
  notify: restart mongodb
